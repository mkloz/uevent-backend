datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
    output   = "./generated/dbml/schema.dbml"
}

// ======== ENUMS ========

enum UserRole {
    USER
    ADMIN
}

enum AuthProviderType {
    EMAIL
    GOOGLE
}

enum NotificationChannelType {
    EMAIL
    IN_APP
    BOTH
    NONE
}

enum EventFormatType {
    CONFERENCE
    LECTURE
    WORKSHOP
    SEMINAR
    MEETUP
    PANEL_DISCUSSION
    WEBINAR
    NETWORKING
    PERFORMANCE
    EXHIBITION
    COMPETITION
    FESTIVAL
    PARTY
    CEREMONY
    TRAINING
    OTHER
}

enum PaymentStatusType {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
}

enum TicketStatusType {
    VALID
    USED
    CANCELLED
}

enum EventThemeType {
    ART
    MUSIC
    TECHNOLOGY
    BUSINESS
    EDUCATION
    HEALTH
    SPORTS
    FOOD
    TRAVEL
    FASHION
    CULTURE
    SCIENCE
    ENVIRONMENT
    ENTERTAINMENT
    POLITICS
    SOCIAL
    OTHER
}

enum ReactionType {
    LIKE
    DISLIKE
    LOVE
    LAUGH
    SAD
    ANGRY
}

// ======== MODELS ========
model UserSettings {
    id                    String                  @id @default(cuid()) @map("id")
    createdAt             DateTime                @default(now()) @map("created_at")
    updatedAt             DateTime                @updatedAt @map("updated_at")
    // privacy settings
    showInAttendeeList    Boolean                 @default(true) @map("show_in_attendee_list")
    showFollowingList     Boolean                 @default(true) @map("show_following_list")
    // Notification preferences
    eventReminderChannel  NotificationChannelType @default(BOTH) @map("event_reminder_channel")
    ticketPurchaseChannel NotificationChannelType @default(BOTH) @map("ticket_purchase_channel")
    newCommentChannel     NotificationChannelType @default(IN_APP) @map("new_comment_channel")
    companyUpdateChannel  NotificationChannelType @default(IN_APP) @map("company_update_channel")
    themeMainColor        String?                 @map("theme_main_color") // Hex color code
    user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                String                  @unique @map("user_id")

    @@map("user_settings")
}

model User {
    id                  String                @id @default(cuid()) @map("id")
    email               String                @unique @map("email")
    password            String?               @map("password") // Null if using OAuth
    name                String                @map("name")
    avatar              String?               @map("avatar")
    bio                 String?               @map("bio")
    authProvider        AuthProviderType      @default(EMAIL) @map("auth_provider")
    role                UserRole              @default(USER) @map("role")
    emailVerified       Boolean               @default(false) @map("email_verified")
    createdAt           DateTime              @default(now()) @map("created_at")
    updatedAt           DateTime              @updatedAt @map("updated_at")
    settingsId          String?               @map("settings_id")
    // Relations
    settings            UserSettings?
    companies           Company[]
    tickets             Ticket[]
    comments            Comment[]
    notifications       Notification[]
    sentNotifications   Notification[]        @relation("SentBy")
    events              Event[]               @relation("EventCreator")
    attendingEvents     EventAttendee[]
    subscribedEvents    EventSubscription[]
    subscribedCompanies CompanySubscription[]
    payments            Payment[]
    reactions           Reaction[]

    @@index([email])
    @@index([name])
    @@map("users")
}

model Company {
    id              String   @id @default(cuid()) @map("id")
    name            String   @map("name")
    email           String   @map("email")
    description     String?  @map("description")
    logo            String?  @map("logo")
    website         String?  @map("website")
    coverImage      String?  @map("cover_image")
    locationId      String   @unique @map("location_id")
    stripeAccountId String?  @map("stripe_account_id")
    isVerified      Boolean  @default(false) @map("is_verified")
    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @updatedAt @map("updated_at")
    ownerId         String   @map("owner_id")

    // Relations
    location    Location              @relation(fields: [locationId], references: [id], onDelete: Cascade)
    owner       User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    events      Event[]
    news        CompanyNews[]
    subscribers CompanySubscription[]
    promocodes  PromoCode[]

    @@index([ownerId])
    @@map("companies")
}

model CompanyNews {
    id        String   @id @default(cuid()) @map("id")
    title     String   @map("title")
    content   String   @map("content")
    imageUrl  String?  @map("image_url")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    companyId String   @map("company_id")

    // Relations
    company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
    comments  Comment[]
    reactions Reaction[]

    @@index([companyId])
    @@map("company_news")
}

model CompanySubscription {
    id        String   @id @default(cuid()) @map("id")
    createdAt DateTime @default(now()) @map("created_at")
    companyId String   @map("company_id")
    userId    String   @map("user_id")

    // Relations
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

    @@unique([userId, companyId])
    @@index([userId])
    @@index([companyId])
    @@map("company_subscriptions")
}

model Event {
    id                  String              @id @default(cuid()) @map("id")
    title               String              @map("title")
    description         String              @map("description")
    posterUrl           String?             @map("poster_url")
    startDate           DateTime            @map("start_date")
    endDate             DateTime            @map("end_date")
    price               Float               @default(0) @map("price")
    maxAttendees        Int?                @map("max_attendees") // Null means unlimited
    publishDate         DateTime            @default(now()) @map("publish_date")
    showAttendeeList    Boolean             @default(true) @map("show_attendee_list")
    notifyOnNewAttendee Boolean             @default(false) @map("notify_on_new_attendee")
    format              EventFormatType     @default(OTHER) @map("format")
    stripeProductId     String?             @map("stripe_product_id")
    stripePriceId       String?             @map("stripe_price_id")
    createdAt           DateTime            @default(now()) @map("created_at")
    updatedAt           DateTime            @updatedAt @map("updated_at")
    locationId          String?             @unique @map("location_id")
    companyId           String              @map("company_id")
    creatorId           String              @map("creator_id")
    // Relations
    creator             User                @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    company             Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
    location            Location?           @relation(fields: [locationId], references: [id], onDelete: Cascade)
    attendees           EventAttendee[]
    tickets             Ticket[]
    comments            Comment[]
    subscribers         EventSubscription[]
    themes              EventThemeType[]

    @@index([creatorId])
    @@index([companyId])
    @@index([startDate])
    @@index([publishDate])
    @@map("events")
}

model Location {
    id      String @id @default(cuid()) @map("id")
    address String @map("address")
    lat     Float  @map("lat") // Latitude for Google Maps
    lng     Float  @map("lng") // Longitude for Google Maps

    // Relations
    event   Event?
    company Company?

    @@map("locations")
}

model EventAttendee {
    id        String   @id @default(cuid()) @map("id")
    createdAt DateTime @default(now()) @map("created_at")
    userId    String   @map("user_id")
    eventId   String   @map("event_id")

    // Relations
    event  Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    ticket Ticket?

    @@index([eventId])
    @@index([userId])
    @@map("event_attendees")
}

model EventSubscription {
    id        String   @id @default(cuid()) @map("id")
    createdAt DateTime @default(now()) @map("created_at")
    userId    String   @map("user_id")
    eventId   String   @map("event_id")

    // Relations
    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([eventId, userId])
    @@index([eventId])
    @@index([userId])
    @@map("event_subscriptions")
}

model Ticket {
    id           String           @id @default(cuid()) @map("id")
    purchaseDate DateTime         @default(now()) @map("purchase_date")
    status       TicketStatusType @default(VALID) @map("status")
    attendeeId   String           @unique @map("attendee_id")
    eventId      String           @map("event_id")
    userId       String           @map("user_id")

    // Relations
    event    Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
    user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    payment  Payment?
    attendee EventAttendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)

    @@index([eventId])
    @@index([userId])
    @@index([purchaseDate])
    @@map("tickets")
}

model PromoCode {
    id             String @id @default(cuid()) @map("id")
    companyId      String @map("company_id")
    code           String @map("code")
    maxUses        Int    @map("max_uses")
    uses           Int    @default(0) @map("uses")
    discount       Int    @map("discount")
    stripeId       String @unique @map("stripe_id")
    stripeCouponId String @unique @map("stripe_coupon_id")

    // Relations
    company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

    @@map("promo_codes")
}

model Comment {
    id            String       @id @default(cuid()) @map("id")
    content       String       @map("content")
    parentId      String?      @map("parent_id") // ID of the comment being replied to
    createdAt     DateTime     @default(now()) @map("created_at")
    updatedAt     DateTime     @updatedAt @map("updated_at")
    eventId       String?      @map("event_id")
    companyNewsId String?      @map("company_news_id")
    userId        String       @map("user_id")
    // Relations
    event         Event?       @relation(fields: [eventId], references: [id], onDelete: Cascade)
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    companyNews   CompanyNews? @relation(fields: [companyNewsId], references: [id], onDelete: Cascade)
    replies       Comment[]    @relation("CommentReplies")
    replyTo       Comment?     @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
    reactions     Reaction[]

    @@index([eventId])
    @@index([userId])
    @@map("comments")
}

model Reaction {
    id        String       @id @default(cuid()) @map("id")
    type      ReactionType @default(LIKE) @map("type")
    createdAt DateTime     @default(now()) @map("created_at")
    userId    String       @map("user_id")
    commentId String?      @map("comment_id")
    newsId    String?      @map("news_id")

    // Relations
    comment Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
    news    CompanyNews? @relation(fields: [newsId], references: [id], onDelete: Cascade)
    user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([commentId])
    @@index([userId])
    @@map("reactions")
}

model Payment {
    id            String            @id @default(cuid()) @map("id")
    amount        Float             @map("amount")
    status        PaymentStatusType @default(PENDING) @map("status")
    paymentIntent String?           @map("payment_intent") // Stripe payment intent ID
    createdAt     DateTime          @default(now()) @map("created_at")
    updatedAt     DateTime          @updatedAt @map("updated_at")

    // Relations
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String @map("user_id")
    ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
    ticketId String @unique @map("ticket_id")

    @@index([userId])
    @@index([status])
    @@map("payments")
}

model Notification {
    id        String   @id @default(cuid()) @map("id")
    type      String   @map("type") // EVENT_REMINDER, TICKET_PURCHASE, NEW_COMMENT, etc.
    title     String   @map("title")
    content   String   @map("content")
    link      String?  @map("link") // URL to redirect when clicked
    isRead    Boolean  @default(false) @map("is_read")
    createdAt DateTime @default(now()) @map("created_at")

    // Relations
    user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String  @map("user_id")
    sentBy   User?   @relation("SentBy", fields: [sentById], references: [id], onDelete: SetNull)
    sentById String? @map("sent_by_id")

    @@index([userId])
    @@index([isRead])
    @@index([createdAt])
    @@map("notifications")
}
